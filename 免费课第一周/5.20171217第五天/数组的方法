数组的方法
1. 方法的作用
2. 参数
3. 当前方法的返回值
4. 原有数组是否发生变化；



1.push
   1. 向数组的末尾新增一项；
   2. 新增的那一项
   3. 新增之后原有数组的长度（length）
   4. 原有数组发生变化;
2.pop
   1. 删除数组的最后一项
   2. 没有参数
   3. 被删除那一项值
   4. 原有数组发生变化
3.unshift
   1. 向数组的开头新增一项
   2. 新增的那一项值
   3. 新增之后数组的长度
   4. 原有数组发生变化
4.shift
   1. 删除数组的第一项
   2. 没有参数
   3. 被删除的那一项
   4. 原有数组的发生变化
5.slice
   slice(m,n)
   1. slice(m,n)从索引m开始，截取到索引n,但不包含索引n那一项；并且以数组形式返回；
   2. 一个参数： slice(n) 从索引n开始，截取数组的末尾；
      两个参数： slice(m,n) m>0&&n>0  如果m>n,截取是个空数组；如果参数是负数，直接把参数+ 数组的总长度；
   3. 截取的那几项，以数组形式返回
   4. 原有数组不发生改变；
6.splice
   // 删除 修改 新增
   1. splice(m,n) 从索引m开始，截取n项，并以数组的形式返回；对于原数组是删除n项；
   2. 参数 ： 一个参数： 从索引m开始，截取到数组的末尾；
             两个参数： 从索引m开始，删除n项，并以数组的形式返回
             三个参数：ary.splice(m,n,q)  从索引m开始，删除n项，用q替换；
   3. 返回删除的那几项，以数组形式返回；
   4. 原有数组发生改变；

7.sort
   1. 对数组进行排序
   2. 没有参数，只能对10以内进行排序
      ary.sort(function(a,b){return a-b})// 从小到大
      ary.sort(function(a,b){return b-a})// 从大到小
   3. 排序以后的数组
   4. 原有数组发生改变
8. reverse
   1. 数组倒过来排
   2. 没有参数
   3. 倒过来排之后的数组
   4. 原有数组发生改变
9. join
   1. 把数组每一项按照特定的字符连接，并以字符串的形式返回；
   2. 有参数，特定的字符
   3. 连接之后的字符串
   4. 原有数组不发生改变
10. concat
   1. 数组的克隆
   2. 参数可有可无
      ary.concat([19,99]) 把两个数组拼接到一起
   3. 克隆以后的数组
   4. 原有数组不发生改变

11. indexOf
   1. 返回当前项在数组中的索引
   2. 要检测的那个数组成员
   3. 返回当前数组成员第一次出现的索引,如果数组中不存在返回-1；
   4. 原有数组不发生改变
12. lastIndexOf
   1. 返回当前项在数组中最后一次出现的索引位置
   2. 要检测的那个数组成员
   3. 返回当前数组成员最后一次出现的索引,如果数组中不存在返回-1；
   4. 原有数组不发生改变
13.forEach/map
   1. 遍历数组
   2. ary.forEach(function(item,index){})
   3.forEach 没有返回值，map有返回值
   4. 原有数组不发生改变
